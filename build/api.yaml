openapi: 3.0.0

info:
  version: "1.0"
  title: "AdB Virtual Academy"
  description: "REST API for the **AdB - Virtual Academy** web application."

tags:
  - name: authors
    description: Author operations
  - name: modules
    description: Module operations
  - name: medias
    description: Media operations
  - name: tags
    description: Tag operations
  - name: forms
    description: Form submissions
  - name: pages
    description: "Path and content for all **basic pages**, excluding details pages for authors, modules and medias."

paths:
  /tags:
    get:
      tags:
        - tags
      summary: Lists all tags.
      description: Returns a list of all tags. Is used to generate a list of all tags in the filter section of the **media overview** page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"

  /authors:
    get:
      tags:
        - authors
      summary: List authors
      description: Returns a list of all authors with basic or detailed information. It is used to generate the **author details** pages, to show a list of authors in the **authors overview** page, to lazy-load authors in the **module details** page and to populate the authors dropdown filter in the **media overview** page.
      parameters:
        - name: moduleId
          in: query
          description: If present, list only entities of the respective module.
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: If present, list only entities of the respective page.
          required: false
          schema:
            type: integer
        - name: details
          in: query
          description: If present, list entities with detailed data instead of preview data.
          required: false
          schema:
            type: boolean
          allowEmptyValue: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageNum:
                    type: integer
                    nullable: true
                  authorsPreview:
                    type: array
                    items:
                      $ref: "#/components/schemas/AuthorPreview"
                  authors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /modules:
    get:
      tags:
        - modules
      summary: List all modules
      description: Returns a list of all modules with detailed information. It is used to generate the **module details** pages.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  modules:
                    type: array
                    items:
                      $ref: "#/components/schemas/Module"

  /medias:
    get:
      tags:
        - medias
      summary: Lists media items
      description: Returns a list of all media items with basic or detailed information. It is used to generate the **media details** pages and to lazy-load preview cards on the **home**, **media overview**, **module details** and **author details** page. Results can be filtered by author, module, chapter and tags.
      parameters:
        - name: authorId
          in: query
          description: If present, list only entities of the respective author.
          required: false
          schema:
            type: integer
        - name: moduleId
          in: query
          description: If present, list only entities of the respective module.
          required: false
          schema:
            type: integer
        - name: chapterId
          in: query
          description: If present, list only entities of the respective chapter.
          required: false
          schema:
            type: integer
        - name: tags
          in: query
          description: If present, list only entities that are associated with the respective tags.
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: page
          in: query
          description: If present, list only entities of the respective page.
          required: false
          schema:
            type: integer
        - name: sort
          in: query
          description: Sort field.
          required: false
          schema:
            type: string
            enum: [title, date]
        - name: order
          in: query
          description: Sort order.
          required: false
          schema:
            type: string
            enum: [asc, desc]
        - name: details
          in: query
          description: If present, list medias with detailed data instead of preview data.
          required: false
          schema:
            type: boolean
          allowEmptyValue: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageNum:
                    type: integer
                    nullable: true
                  mediasPreview:
                    type: array
                    items:
                      $ref: "#/components/schemas/MediaPreview"
                    nullable: true
                  medias:
                    type: array
                    items:
                      $ref: "#/components/schemas/Media"
                    nullable: true
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
    post:
      tags:
        - medias
        - forms
      summary: Creates a new media item
      description: Will be submitted with the "Einreichen" form. It creates a new media item along with new authors (person or organisation). The newly created items won't be visible in the frontend but saved for approval by the respective content managers.
      requestBody:
        $ref: "#/components/requestBodies/Media"
      responses:
        "201":
          description: Successful operation.
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /media-selection:
    get:
      tags:
        - medias
      summary: Download selected medias
      description: Downloads either a single media item or a list of media items as a ZIP file.
      parameters:
        - name: medias
          in: query
          description: List of media IDs to download.
          schema:
            type: array
            items:
              type: integer
      responses:
        "200":
          description: Successful operation.
        "400":
          description: Invalid request.

  /contact:
    post:
      tags:
        - forms
      summary: Creates a contact request
      description: Is submitted with the contact form on the "About & Kontakt" page.
      requestBody:
        $ref: "#/components/requestBodies/Contact"
      responses:
        "201":
          description: Successful operation.
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /suggestion:
    post:
      tags:
        - forms
      summary: Creates a suggestion.
      description: Is submitted with the "Anregungen und Vorschläge" form on the module details page.
      requestBody:
        $ref: "#/components/requestBodies/Suggestion"
      responses:
        "201":
          description: Successful operation.
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /pages/home:
    get:
      tags:
        - pages
      summary: Start Page
      description: Get the path and content of the start page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "home"
                  path:
                    type: string
                    example: "/"
                  seo:
                    $ref: "#/components/schemas/PageSeo"
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Entwurf “Fotogrtafie und Weißraum”"
                      description:
                        type: string
                        example: "Dominierende Elemente des Entwurfs sind markante Fotos und klare Typografie in übersichtlichen Kompositionen, die an ein Magazin-Layout erinnert. Jedes Thema..."

  /pages/medias-overview:
    get:
      tags:
        - pages
      summary: Medias Overview Page
      description: Get the path and content of the media overview page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "medias-overview"
                  path:
                    type: string
                    example: "/medias"
                  seo:
                    $ref: "#/components/schemas/PageSeo"
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Mediaübersicht"
                      authorsPreview:
                        type: array
                        items:
                          $ref: "#/components/schemas/AuthorPreview"
                      modulesPreview:
                        type: array
                        items:
                          $ref: "#/components/schemas/ModulePreview"
                      chaptersPreview:
                        type: array
                        items:
                          $ref: "#/components/schemas/ChapterPreview"
                      tags:
                        type: array
                        items:
                          $ref: "#/components/schemas/Tag"

  /pages/authors-overview:
    get:
      tags:
        - pages
      summary: Authors Overview Page
      description: Get the path and content of the author overview page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "authors-overview"
                  path:
                    type: string
                    example: "/autoren"
                  seo:
                    $ref: "#/components/schemas/PageSeo"
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Autorenübersicht"

  /pages/about:
    get:
      tags:
        - pages
      summary: About Us Page
      description: Get the path and content of the about us page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "about"
                  path:
                    type: string
                    example: "/ueber-uns"
                  seo:
                    $ref: "#/components/schemas/PageSeo"
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Über uns"
                      description:
                        type: string
                        example: "Lorem ipsum dolor sit amet, consetetur..."
                      team:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "Max Mustermann"
                            imagePath:
                              type: string
                              example: "/assets/img/maxmustermann.jpg"

  /pages/imprint:
    get:
      tags:
        - pages
      summary: Imprint Page
      description: Get the path and content of the imprint page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "imprint"
                  path:
                    type: string
                    example: "/impressum"
                  seo:
                    $ref: "#/components/schemas/PageSeo"
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Impressum"
                      description:
                        type: string
                        example: "Freitext lorem ipsum..."

  /pages/privacy:
    get:
      tags:
        - pages
      summary: Privacy Policy Page
      description: Get the path and content of the privacy policy page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "privacy"
                  path:
                    type: string
                    example: "/datenschutz"
                  seo:
                    $ref: "#/components/schemas/PageSeo"
                  content:
                    type: object
                    properties:
                      title:
                        type: string
                        example: "Datenschutz"
                      description:
                        type: string
                        example: "Freitext lorem ipsum..."

components:
  schemas:
    Media:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            title:
              type: string
            subline:
              type: string
            imagePath:
              type: string
            description:
              type: string
            date:
              type: string
              example: "2019-08-20"
            documents:
              type: array
              items:
                $ref: "#/components/schemas/Document"
            authors:
              type: array
              items:
                $ref: "#/components/schemas/AuthorPreview"
            tags:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
            modules:
              type: array
              items:
                $ref: "#/components/schemas/ModulePreview"
        path:
          type: string
        seo:
          $ref: "#/components/schemas/PageSeo"

    MediaPreview:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            title:
              type: string
            subline:
              type: string
            imagePath:
              type: string
            date:
              type: string
              example: "2019-08-20"
        path:
          type: string

    Author:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            type:
              type: string
              enum:
                - person
                - organisation
            firstName:
              type: string
              example: Max
            lastName:
              type: string
              example: Mustermann
            organisationName:
              type: string
            position:
              type: string
              example: Gymnasiallehrer
            description:
              type: string
            phone:
              type: string
            email:
              type: string
            website:
              type: string
            instagramId:
              type: string
            facebookId:
              type: string
            imagePath:
              type: string
            mediasPreview:
              type: array
              items:
                $ref: "#/components/schemas/MediaPreview"
            modulesPreview:
              type: array
              items:
                $ref: "#/components/schemas/ModulePreview"
        path:
          type: string
        seo:
          $ref: "#/components/schemas/PageSeo"

    AuthorPreview:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            type:
              type: string
              enum:
                - person
                - organisation
            firstName:
              type: string
              example: Max
            lastName:
              type: string
              example: Mustermann
            organisationName:
              type: string
            position:
              type: string
              example: Gymnasiallehrer
            imagePath:
              type: string
        path:
          type: string
          example: "/autoren/max-mustermann"

    Module:
      type: object
      properties:
        id:
          type: integer
        content:
          type: object
          properties:
            name:
              type: string
              example: Demokratie
            subline:
              type: string
              example: Radikalisiert euch!
            description:
              type: string
            vimeoId:
              type: string
              example: "oa12af34"
            authorsDescription:
              type: string
            authorsPreview:
              type: array
              items:
                $ref: "#/components/schemas/AuthorPreview"
            chaptersPreview:
              type: array
              items:
                $ref: "#/components/schemas/Chapter"
        path:
          type: string
          example: "/modul/demokratie"
        seo:
          $ref: "#/components/schemas/PageSeo"

    ModulePreview:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            name:
              type: string
              example: Demokratie
            subline:
              type: string
              example: Radikalisiert euch!
        path:
          type: string
          example: "/modul/demokratie"

    Chapter:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        mediasPreview:
          type: array
          items:
            $ref: "#/components/schemas/MediaPreview"

    ChapterPreview:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

    BadRequest:
      type: object
      properties:
        message:
          type: string

    Document:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: "Lernmaterial"
        mimeType:
          type: string
          enum:
            - pdf
            - doc
            - ppt
            - jpg
            - png
            - gif
        path:
          type: string
          example: "/dokumente/lernmaterial.pdf"

    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: "Langer Hashtag"

    MetaTag:
      type: object
      properties:
        property:
          type: string
          example: "description"
        content:
          type: string
          example: "This is the home of the Adb Virtual Academy."

    PageSeo:
      type: object
      properties:
        title:
          type: string
          example: "AdB Virtual Academy - Home"
        metaTags:
          type: array
          items:
            $ref: "#/components/schemas/MetaTag"

  requestBodies:
    Contact:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - message
            properties:
              name:
                type: string
              company:
                type: string
              email:
                type: string
              message:
                type: string
      required: true

    Suggestion:
      content:
        application/json:
          schema:
            type: object
            required:
              - lastName
              - email
              - message
            properties:
              title:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              message:
                type: string
      required: true

    Media:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              subline:
                type: string
              imagePath:
                type: string
              description:
                type: string
              date:
                type: string
                example: "2019-08-20"
              documents:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
              authors:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    organisationName:
                      type: string
                    email:
                      type: string
                    type:
                      type: string
                      enum:
                        - person
                        - organisation
              tags:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      description: Media object that needs to be submitted.
      required: true

# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/klattmansash/VirtualAcademy/1.0
