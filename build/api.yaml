openapi: 3.0.0

info:
  version: "1.0"
  title: "AdB Virtual Academy"
  description: "REST API for the **AdB - Virtual Academy** web application."

tags:
  - name: authors
    description: Author operations
  - name: modules
    description: Module operations
  - name: medias
    description: Media operations
  - name: tags
    description: Tag operations
  - name: forms
    description: Form submissions
  - name: pages
    description: "Path, seo and content for all **core pages**, excluding details pages for authors, modules and medias."

paths:
  /tags:
    get:
      tags:
        - tags
      summary: Get tags
      description: Returns a list of all tags. Is used to generate a list of all tags in the filter section of the **media overview** page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tag"

  /chapters:
    get:
      tags:
        - chapters
      summary: Get chapters
      description: Returns a list of all chapters. It is used to generate a list of all chapters inside the internal Gatsby store during the frontend build process.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Chapter"

  /chapter-types:
    get:
      tags:
        - chapters
      summary: Get chapter types
      description: Returns a list of all chapter types. It is used to generate a list of all chapter types inside the internal Gatsby store during the frontend build process.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ChapterType"

  /authors:
    get:
      tags:
        - authors
      summary: Get authors
      description: Returns a list of all authors with basic or detailed information. It is used to generate the **author details** pages, to show a list of authors in the **authors overview** page and to lazy-load authors in the **module details** page.
      parameters:
        - $ref: "#/components/parameters/filterModule"
        - $ref: "#/components/parameters/pageOffset"

      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /modules:
    get:
      tags:
        - modules
      summary: Get modules
      description: Returns a list of all modules with detailed information. It is used to generate the **module details** pages.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Module"

  /medias:
    get:
      tags:
        - medias
      summary: Get medias
      description: Returns a list of all media items with basic or detailed information. It is used to generate the **media details** pages and to lazy-load preview cards on the **home**, **media overview**, **module details** and **author details** page. Results can be filtered by author, module, chapter and tags.
      parameters:
        - $ref: "#/components/parameters/filterAuthor"
        - $ref: "#/components/parameters/filterModule"
        - $ref: "#/components/parameters/filterChapterType"
        - $ref: "#/components/parameters/filterTags"
        - $ref: "#/components/parameters/sortField"
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/pageOffset"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Media"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
    post:
      tags:
        - medias
        - forms
      summary: Submit media
      description: Will be submitted with the "Einreichen" form. It creates a new media item along with new authors (person or organisation). The newly created items won't be visible in the frontend but saved for approval by the respective content managers.
      requestBody:
        $ref: "#/components/requestBodies/Media"
      responses:
        "201":
          description: Successful operation.
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /media-selection:
    get:
      tags:
        - medias
      summary: Downloads medias
      description: Downloads either a single media or a list of medias as a ZIP file.
      parameters:
        - name: medias
          in: query
          description: List of media IDs to download.
          schema:
            type: array
            items:
              type: integer
      responses:
        "200":
          description: Successful operation.
        "400":
          description: Invalid request.

  /contact:
    post:
      tags:
        - forms
      summary: Submit contact
      description: Is submitted with the contact form on the "About & Kontakt" page.
      requestBody:
        $ref: "#/components/requestBodies/Contact"
      responses:
        "201":
          description: Successful operation.
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /suggestion:
    post:
      tags:
        - forms
      summary: Submit suggestion
      description: Is submitted with the "Anregungen und Vorschläge" form on the module details page.
      requestBody:
        $ref: "#/components/requestBodies/Suggestion"
      responses:
        "201":
          description: Successful operation.
        "400":
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"

  /pages/home:
    get:
      tags:
        - pages
      summary: Get home page
      description: Get the path, seo and content data of the start page, including all modules and latest medias as preview to generate the static site.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/CorePage"
                      - type: object
                        properties:
                          content:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Entwurf “Fotogrtafie und Weißraum”"
                              description:
                                type: string
                                example: "Dominierende Elemente des Entwurfs sind markante Fotos und klare Typografie in übersichtlichen Kompositionen, die an ein Magazin-Layout erinnert. Jedes Thema..."
                              mediasTitle:
                                type: string
                                example: "Neue Mediabeiträge"
                          relationships:
                            type: object
                            properties:
                              modules:
                                type: array
                                items:
                                  type: string
                              mediasPreview:
                                type: array
                                items:
                                  type: string

  /pages/medias:
    get:
      tags:
        - pages
      summary: Get medias page
      description: Get the path, seo, content and relationships of the **media overview page**. The content includes all authors, modules and chapters with preview data as well as all tags to generate the filter section. Also all medias that should be visible when the page loads are provided as preview data.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/CorePage"
                      - type: object
                        properties:
                          content:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Mediaübersicht"
                              tagsTitle:
                                type: string
                                example: "Tags"
                              sortLabel:
                                type: string
                                example: "Sortieren"
                              sortLabelAlpha:
                                type: string
                                example: "A-Z"
                              sortLabelDate:
                                type: string
                                example: "Datum"
                              sort:
                                type: string
                                enum:
                                  - title
                                  - date
                              order:
                                type: string
                                enum:
                                  - asc
                                  - desc
                          relationships:
                            type: object
                            properties:
                              authors:
                                type: array
                                items:
                                  type: string
                              chapterTypes:
                                type: array
                                items:
                                  type: string
                              medias:
                                type: array
                                items:
                                  type: string
                              modules:
                                type: array
                                items:
                                  type: string
                              tags:
                                type: array
                                items:
                                  type: string

  /pages/authors:
    get:
      tags:
        - pages
      summary: Get authors page
      description: Get the path, content, seo and relations of the **author overview** page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/CorePage"
                      - type: object
                        properties:
                          content:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Autorenübersicht"
                          relationships:
                            type: object
                            properties:
                              authors:
                                type: array
                                items:
                                  type: string

  /pages/about:
    get:
      tags:
        - pages
      summary: Get about page
      description: Get the path and content of the about us page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/CorePage"
                      - type: object
                        properties:
                          content:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Über uns"
                              description:
                                type: string
                                example: "Lorem ipsum dolor sit amet, consetetur..."
                              teamTitle:
                                type: string
                                example: "Team"
                              teamList:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    name:
                                      type: string
                                      example: "Max Mustermann"
                                    imagePath:
                                      type: string
                                      example: "/assets/img/maxmustermann.jpg"
                              contactTitle:
                                type: string
                                example: "Kontakt"
                              contactLabelName:
                                type: string
                                example: "Name"
                              contactLabelCompany:
                                type: string
                                example: "Unternehmen / Organisation"
                              contactLabelEmail:
                                type: string
                                example: "E-Mail Adresse"
                              contactLabelMessage:
                                type: string
                                example: "Nachricht"
                              contactLabelSubmit:
                                type: string
                                example: "Absenden"

  /pages/imprint:
    get:
      tags:
        - pages
      summary: Get imprint page
      description: Get the path and content of the imprint page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/CorePage"
                      - type: object
                        properties:
                          content:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Impressum"
                              description:
                                type: string
                                example: "Freitext lorem ipsum..."

  /pages/privacy:
    get:
      tags:
        - pages
      summary: Get privacy page
      description: Get the path and content of the privacy policy page.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/CorePage"
                      - type: object
                        properties:
                          content:
                            type: object
                            properties:
                              title:
                                type: string
                                example: "Datenschutz"
                              description:
                                type: string
                                example: "Freitext lorem ipsum..."

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            type:
              type: string
              enum:
                - person
                - organisation
            firstName:
              type: string
              example: Max
            lastName:
              type: string
              example: Mustermann
            organisationName:
              type: string
            position:
              type: string
              example: Gymnasiallehrer
            description:
              type: string
            phone:
              type: string
            email:
              type: string
            website:
              type: string
            instagramId:
              type: string
            facebookId:
              type: string
            imagePath:
              type: string
        relationships:
          type: object
          properties:
            modules:
              type: array
              items:
                type: string
            medias:
              type: array
              items:
                type: string
        path:
          type: string
        seo:
          $ref: "#/components/schemas/PageSeo"

    BadRequest:
      type: object
      properties:
        message:
          type: string

    ChapterType:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string

    Chapter:
      type: object
      properties:
        id:
          type: string
        relationships:
          type: object
          properties:
            chapterType:
              type: string
            medias:
              type: array
              items:
                type: string

    CorePage:
      type: object
      properties:
        id:
          type: string
        path:
          type: string
          example: "/medias"
        seo:
          $ref: "#/components/schemas/PageSeo"
        content:
          type: object

    Document:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          example: "Lernmaterial"
        mimeType:
          type: string
          enum:
            - pdf
            - doc
            - ppt
            - jpg
            - png
            - gif
        path:
          type: string
          example: "/dokumente/lernmaterial.pdf"

    Media:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            title:
              type: string
            subline:
              type: string
            imagePath:
              type: string
            description:
              type: string
            date:
              type: string
              example: "2019-08-20"
        relationships:
          type: object
          properties:
            documents:
              type: array
              items:
                type: string
            authors:
              type: array
              items:
                type: string
            tags:
              type: array
              items:
                type: string
            modules:
              type: array
              items:
                type: string
        path:
          type: string
        seo:
          $ref: "#/components/schemas/PageSeo"

    MetaTag:
      type: object
      properties:
        property:
          type: string
          example: "description"
        content:
          type: string
          example: "This is the home of the Adb Virtual Academy."

    Module:
      type: object
      properties:
        id:
          type: string
        content:
          type: object
          properties:
            title:
              type: string
              example: Demokratie
            subline:
              type: string
              example: Radikalisiert euch!
            description:
              type: string
            imagePath:
              type: string
              example: "/images/module-x.jpg"
            vimeoId:
              type: string
              example: "oa12af34"
            authorsDescription:
              type: string

        relationships:
          type: object
          properties:
            chapters:
              type: array
              items:
                type: string
            authorsPreview:
              type: array
              items:
                type: string

        path:
          type: string
          example: "/modul/demokratie"
        seo:
          $ref: "#/components/schemas/PageSeo"

    PageSeo:
      type: object
      properties:
        title:
          type: string
          example: "AdB Virtual Academy - Home"
        metaTags:
          type: array
          items:
            $ref: "#/components/schemas/MetaTag"

    Pagination:
      type: object
      properties:
        next:
          type: integer
        prev:
          type: integer

    Tag:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          example: "Langer Hashtag"

  requestBodies:
    Contact:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - message
            properties:
              name:
                type: string
              company:
                type: string
              email:
                type: string
              message:
                type: string
      required: true

    Suggestion:
      content:
        application/json:
          schema:
            type: object
            required:
              - lastName
              - email
              - message
            properties:
              title:
                type: string
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              message:
                type: string
      required: true

    Media:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              subline:
                type: string
              imagePath:
                type: string
              description:
                type: string
              date:
                type: string
                example: "2019-08-20"
              documents:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
              authors:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    organisationName:
                      type: string
                    email:
                      type: string
                    type:
                      type: string
                      enum:
                        - person
                        - organisation
              tags:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
      description: Media object that needs to be submitted.
      required: true

  parameters:
    pageOffset:
      name: _page
      in: query
      description: If present, list only entities for the respective page number.
      required: false
      example: 1
      schema:
        type: integer
        minimum: 0

    showDetails:
      name: _details
      in: query
      description: If present, list medias with detailed data instead of preview data.
      required: false
      example: true
      schema:
        type: boolean
      allowEmptyValue: true

    sortField:
      name: _sort
      in: query
      description: Sort field.
      required: false
      schema:
        type: string
        enum: [title, date]

    sortOrder:
      name: _order
      in: query
      description: Sort order.
      required: false
      schema:
        type: string
        enum: [asc, desc]

    filterModule:
      name: module
      in: query
      description: If present, list only entities related to the respective module.
      required: false
      example: "1"
      schema:
        type: string

    filterAuthor:
      name: author
      in: query
      description: If present, list only entities related to the respective author.
      required: false
      example: "1"
      schema:
        type: string

    filterChapterType:
      name: chapter_type
      in: query
      description: If present, list only entities related to the respective chapter.
      required: false
      example: "1"
      schema:
        type: string

    filterTags:
      name: tags
      in: query
      description: If present, list only entities that are related to the respective tags.
      required: false
      example: ["1", "9", "16"]
      schema:
        type: array
        items:
          type: string

servers:
  - description: Local mock server
    url: http://localhost:3000
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/klattmansash/VirtualAcademy/1.0
